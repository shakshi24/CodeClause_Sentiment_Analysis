# -*- coding: utf-8 -*-
"""Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Ntn384J2STjUqdehU1_H8wfnLJnBgY2
"""

#Reading the Dataset
import pandas as pd
df = pd.read_csv('reviews.csv')
df.head()

len(df.index) #number of rows in the data frame

#Data Preprocessing

import numpy as np

def create_sentiment(rating):

    if rating==1 or rating==2:
        return -1 # negative sentiment
    elif rating==4 or rating==5:
        return 1 # positive sentiment
    else:
        return 0 # neutral sentiment

df['Sentiment'] = df['Rating'].apply(create_sentiment)

df.head(5)

#remove punctuation, characters, and digits

from sklearn.feature_extraction.text import re

def clean_data(review):

    no_punc = re.sub(r'[^\w\s]', '', review)
    no_digits = ''.join([i for i in no_punc if not i.isdigit()])

    return(no_digits)

df['Review'][0]

df['Review'] = df['Review'].apply(clean_data)
df['Review'][0]

#TF-IDF Transformation

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(strip_accents=None,
                        lowercase=False,
                        preprocessor=None)

X = tfidf.fit_transform(df['Review'])

'''
Building and Evaluating the Machine Learning Model
We can now train our algorithm on the review data to classify its sentiment into 3 categories:

-> Positive
-> Negative
-> Neutral
'''

from sklearn.model_selection import train_test_split
y = df['Sentiment'] # target variable
X_train, X_test, y_train, y_test = train_test_split(X,y)

# logistic regression classifier

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(solver='liblinear')
lr.fit(X_train,y_train) # fit the model
preds = lr.predict(X_test) # make predictions

#evaluate the performance
from sklearn.metrics import accuracy_score
accuracy_score(preds,y_test) # 0.78